<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="tdm.order.sntr.mine.alpha0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="0">
  <order id="TDM_Order_SnTR_Mine" name="SnTR Mine (Alpha 0)" description="{1041, 162}" category="mining" infinite="true">
    <params>
      <param name="ware" required="true" type="ware" text="{1041, 10145}" comment="Ware to trade. What do we want to trade?">
        <input_param name="cancarry" value="this.ship"/>
      </param>
      <param name="maxamount" required="false" default="this.ship.cargo.capacity.all" type="number" advanced="false" text="{1041, 10051}" comment="Max amount.">
        <input_param name="startvalue" value="this.ship.cargo.{$ware}.max"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="this.ship.cargo.{$ware}.max"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="minamount" required="false" default="this.ship.cargo.{$ware}.max / 10" type="number" advanced="false" text="{1041, 10065}" comment="Min amount.">
        <input_param name="startvalue" value="this.ship.cargo.{$ware}.max / 10"/>
        <input_param name="min" value="1"/>
        <input_param name="max" value="this.ship.cargo.{$ware}.max"/> 
        <input_param name="step" value="1"/>
      </param>
      <!--
      <param name="maxbuyprice" required="false" default="($ware.averageprice / 1Cr)Cr" type="money" text="Max buy price" comment="Min/Max price. At which price is a trade acceptable?">
        <input_param name="startvalue" value="($ware.averageprice / 1Cr)Cr"/>
        <input_param name="min" value="($ware.minprice / 1Cr)Cr"/>
        <input_param name="max" value="($ware.maxprice / 1Cr)Cr"/>
        <input_param name="step" value="1Cr"/>
      </param>
      -->
      <param name="minsellprice" required="false" default="($ware.averageprice / 1Cr)Cr" type="money" text="Min sell price" comment="Min/Max price. At which price is a trade acceptable?">
        <input_param name="startvalue" value="($ware.averageprice / 1Cr)Cr"/>
        <input_param name="min" value="($ware.minprice / 1Cr)Cr"/>
        <input_param name="max" value="($ware.maxprice / 1Cr)Cr"/>
        <input_param name="step" value="1Cr"/>
      </param>
      <param name="numDeposits" required="false" type="number" default="0" text="Enable Resource Deposits" comment="Number of deposits the miner can mine at.">
        <input_param name="startvalue" value="1 + ( 2 * @this.ship.pilot.skill.management + @this.ship.pilot.skill.morale ) / 5"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="1 + ( 2 * @this.ship.pilot.skill.management + @this.ship.pilot.skill.morale ) / 5"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="deposit1" required="false" default="null" type="object" text="Resource deposit 1" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit2" required="false" default="null" type="object" text="Resource deposit 2" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit3" required="false" default="null" type="object" text="Resource deposit 3" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit4" required="false" default="null" type="object" text="Resource deposit 4" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit5" required="false" default="null" type="object" text="Resource deposit 5" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit6" required="false" default="null" type="object" text="Resource deposit 6" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit7" required="false" default="null" type="object" text="Resource deposit 7" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit8" required="false" default="null" type="object" text="Resource deposit 8" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit9" required="false" default="null" type="object" text="Resource deposit 9" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="deposit10" required="false" default="null" type="object" text="Resource deposit 10" comment="Resource deposit. Object">
        <input_param name="class" value="[class.resourceprobe]"/>
      </param>
      <param name="numCustomers" required="false" type="number" default="0" text="Enable customers" comment="Number of customers the trader sells to.">
        <input_param name="startvalue" value="1 + ( 2 * @this.ship.pilot.skill.management + @this.ship.pilot.skill.piloting ) / 5"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="1 + ( 2 * @this.ship.pilot.skill.management + @this.ship.pilot.skill.piloting ) / 5"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="customer1" required="false" default="null" type="object" text="Customer 1" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer2" required="false" default="null" type="object" text="Customer 2" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer3" required="false" default="null" type="object" text="Customer 3" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer4" required="false" default="null" type="object" text="Customer 4" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer5" required="false" default="null" type="object" text="Customer 5" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer6" required="false" default="null" type="object" text="Customer 6" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer7" required="false" default="null" type="object" text="Customer 7" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer8" required="false" default="null" type="object" text="Customer 8" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer9" required="false" default="null" type="object" text="Customer 9" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="customer10" required="false" default="null" type="object" text="Customer 10" comment="Customer. Object">
        <input_param name="class" value="[class.station]"/>
      </param>
      
    </params>
    <skill min="20"/>
    <requires primarypurpose="purpose.mine"/>
    <!--
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
    </requires>
    -->
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="ResupplyHandler" />
    <handler ref="JobRemoveRequestHandler" />
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <set_order_syncpoint_reached order="this.ship.order"/>
    <do_if value="this.ship.commander">
      <set_command command="command.mining" param="this.ship.commander" />
    </do_if>
    <do_else>
      <set_command command="command.freemining" />
    </do_else>

    <do_if value="this.assignedcontrolled.hasownaccount and not this.assignedcontrolled.tradeorders.count">
      <remove_object_account object="this.assignedcontrolled" transfer="true"/>
    </do_if>

    <!-- Main action for waiting times -->
    <set_command_action commandaction="commandaction.searchingtrades" />
  </init>
  <attention min="unknown">
    <actions>

      <!-- set up initial state for trade runs -->
      <label name="start" />

      <set_value name="$logfile" exact="player.systemtime.{'%Y-%m-%d_%H'} + '_SnTR_Mine_' + this.ship.idcode"/>
      
      <set_value name="$deposits" exact="[$deposit1, $deposit2, $deposit3, $deposit4, $deposit5, $deposit6, $deposit7, $deposit8, $deposit9, $deposit10]"/>
      <set_value name="$customers" exact="[$customer1, $customer2, $customer3, $customer4, $customer5, $customer6, $customer7, $customer8, $customer9, $customer10]"/>
      <resize_list list="$deposits" count="$numDeposits"/>
      <resize_list list="$customers" count="$numCustomers"/>

      <debug_to_file name="$logfile" directory="'TDM'" text="'------------------------------------------------'" output="false" append="true" />
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2 (%3)'.['ship name', this.ship.knownname, this.ship.idcode]" output="false" append="true" />  
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2 (%3)'.['has own account', this.assignedcontrolled.hasownaccount, this.assignedcontrolled.money]" output="false" append="true" />  
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['ware', $ware.name]" output="false" append="true" /> 
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['min amount', $minamount]" output="false" append="true" />    
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['max amount', $maxamount]" output="false" append="true" />
      <!-- <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['max buy price', $maxbuyprice]" output="false" append="true" /> -->
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['min sell price', $minsellprice]" output="false" append="true" />    
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['enabled deposits', $numDeposits]" output="false" append="true" />
      <do_all exact="$deposits.count" counter="$i">
        <do_if value="$deposits.{$i} != null">
          <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 %2: %3 (%4)'.['deposit', $i, $deposits.{$i}.knownname, $deposits.{$i}.sector.knownname]" output="false" append="true" />  
        </do_if>
      </do_all>
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['enabled customers', $numCustomers]" output="false" append="true" />
      <do_all exact="$customers.count" counter="$i">
        <do_if value="$customers.{$i} != null">
          <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 %2: %3 (%4)'.['customer', $i, $customers.{$i}.knownname, $customers.{$i}.sector.knownname]" output="false" append="true" />  
        </do_if>
      </do_all>

      <!-- Idle for a while -->
      <set_value name="$maxidletime" exact="(70 - 4 * this.ship.pilot.skill.morale)s"/>
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': %1 : %2'.['max idletime', $maxidletime]" output="false" append="true" /> 
      <run_script name="'move.idle'" >
        <param name="Min" value="5s" />
        <param name="Max" value="$maxidletime" />
      </run_script>
      

      <!-- loop -->
      <label name="find mining run"/>

      <!-- Idle for a while -->
      <run_script name="'move.idle'" >
        <param name="Min" value="5s" />
        <param name="Max" value="$maxidletime" />
      </run_script>

      <!-- Initializate the results -->
      <set_value name="$deposit_probe" exact="null" />
      <set_value name="$selloffer" exact="null" />

      <set_value name="$wares" exact="[$ware]"/>

      <debug_to_file name="$logfile" directory="'TDM'" text="'------------------------------------------------'" output="false" append="true" />
      <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': cargo : %1 units of %2'.[this.ship.cargo.{$ware}.count, $ware.name]" output="false" append="true" /> 
      <!-- if we have a sufficent amount in cargo then try to sell, otherwise buy -->
      <do_if value="this.ship.cargo.{$ware}.count ge $minamount">
        <set_command_action commandaction="commandaction.searchingtrades" />
        <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': trying to sell'" output="false" append="true" /> 
        <set_value name="$maxprofit" exact="0"/>
        <do_all exact="$customers.count" counter="$i">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <find_buy_offer tradepartner="this.ship" buyer="$customers.{$i}" result="$buyoffers" wares="$wares" multiple="true">
            <match_buyer>
              <match tradesknownto="this.owner"/>
              <!-- don't find (supply) offers on ships -->
              <match class="class.ship" negate="true" />
            </match_buyer>
            <amount min="$minamount"/>
            <price min="$minsellprice"/>
          </find_buy_offer>
          <do_all exact="$buyoffers.count" counter="$j">
            <!-- <set_value name="$profit" exact="$buyoffers.{$j}.unitprice * [$buyoffers.{$j}.amount, this.ship.cargo.{$ware}.count, $maxamount].min"/> -->
            <set_value name="$profit" exact="$buyoffers.{$j}.unitprice * [$buyoffers.{$j}.amount, this.ship.cargo.{$ware}.count].min"/>
            <do_if value="$profit gt $maxprofit">
              <set_value name="$maxprofit" exact="$profit"/>
              <set_value name="$buyoffer" exact="$buyoffers.{$j}"/>
            </do_if>
          </do_all>
        </do_all>
        <do_if value="$maxprofit gt 0">
          <!-- <clamp_trade_amount result="$sellamount" trade="$buyoffer" amount="$maxamount" seller="this.ship" buyer="$buyoffer.owner"/> -->
          <clamp_trade_amount result="$sellamount" trade="$buyoffer" seller="this.ship" buyer="$buyoffer.owner"/>
          <do_if value="$sellamount gt 0">
            <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': selling %1 units for %2 to %3(%4)'.[$sellamount, $buyoffer.unitprice, $buyoffer.owner.knownname, $buyoffer.owner.sector.knownname]" output="false" append="true" />  
            <create_trade_order object="this.object" tradeoffer="$buyoffer" amount="$sellamount"/>
          </do_if>
        </do_if>
      </do_if>

      <!-- try to mine somewhere -->
      <!-- <do_if value="this.ship.cargo.{$ware}.free gt $minamount"> -->
      <do_if value="[$maxamount - this.ship.cargo.{$ware}.count, this.ship.cargo.{$ware}.free].min ge $minamount">
        <set_command_action commandaction="commandaction.searchingresources" />
        <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': trying to mine'" output="false" append="true" />
        <set_value name="$maxyield" exact="0"/>
        <do_all exact="$deposits.count" counter="$i">
          <wait min="50ms" max="100ms" comment="Avoid performance peaks with find functions"/>
          <!--
          <find_sell_offer tradepartner="this.ship" seller="$deposits.{$i}" result="$selloffers" wares="$wares" multiple="true">
            <match_seller>
              <match tradesknownto="this.owner"/>
            </match_seller>
            <amount min="$minamount"/>
            <price max="$maxbuyprice"/>
          </find_sell_offer>
          <do_all exact="$selloffers.count" counter="$j">
            <set_value name="$profit" exact="( 1 + $maxbuyprice - $selloffers.{$j}.unitprice ) * [$selloffers.{$j}.amount, this.ship.cargo.{$ware}.free, $maxamount - this.ship.cargo.{$ware}.count].min"/>
            <do_if value="$profit gt $maxprofit">
              <set_value name="$maxprofit" exact="$profit"/>
              <set_value name="$selloffer" exact="$selloffers.{$j}"/>
            </do_if>
          </do_all>
          -->
          <set_value name="$yield" exact="$deposits.{$i}.currentyield.{$ware}.count"/>
          <do_if value="($yield ge $minamount )  and ($yield gt $maxyield)">
            <set_value name="$sector" exact="null"/>
            <set_value name="$pos_sector" exact="null"/>
            <set_value name="$distance" exact="null"/>
            <find_closest_resource ware="$ware" refobject="$deposits.{$i}" sector="$sector" position="$pos_sector" minamount="$minamount" distance="$distance"/>
            <do_if value="$distance lt 100km">
              <set_value name="$maxyield" exact="$yield"/>
              <set_value name="$deposit_sector" exact="$sector"/>
              <set_value name="$deposit_position" exact="$pos_sector"/>
              <set_value name="$deposit_probe" exact="$deposits.{$i}"/>
            </do_if>
          </do_if>
        </do_all>
        <do_if value="$maxyield gt 0">
          <debug_to_file name="$logfile" directory="'TDM'" text="player.age/1h + ': mining near %1 in %2'.[$deposit_probe.knownname, $deposit_sector.knownname]" output="false" append="true" />  
          <!-- collecting is done in an external script -->
          <create_order object="this.assignedcontrolled" id="'MiningCollect'" immediate="true">
            <param name="destination" value="[$deposit_sector, $deposit_position]"/>
            <param name="ware" value="$ware"/>
          </create_order>
        </do_if>
      </do_if>

      <debug_to_file name="$logfile" directory="'TDM'" text="'------------------------------------------------'" output="false" append="true" />
      <resume label="find mining run"/>

    </actions>
  </attention>
</aiscript>
